  //data-type-of-elements[] arr-var-name = new data-type-of-elements[size];
            int[] numbers = new int[4];
            numbers[0] = 1;
            numbers[1] = 2;
            numbers[2] = 3;
            numbers[3] = 4;
            for (int i = 0; i < numbers.Length; i++)
            {
                Console.WriteLine(numbers[i]);
            }
            

            string[] names = new string[2];
            names[0] = "Joydip";
            names[1] = "Murali";
            //Array numbers = new Array(typeof(int),4);

            /*
 *  //Employee employeeObj = new Employee("Joydip", 1, 1000, 2000, 3000);
            //C# 4.0 (2010) -- named arguments
            Employee joydipEmployeeObj = new Employee(id: 1, basicPay: 1000, name: "joydip", daPay: 2000, hraPay: 3000);
            joydipEmployeeObj.ProjectName = "CITA";

            Employee anilEmployeeObj = new Employee(id: 2, basicPay: 2000, name: "Anil", daPay: 3000, hraPay: 4000);
            anilEmployeeObj.ProjectName = "SSIS";
            //joydipEmployeeObj.SetProjectName("CITA");
            //anilEmployeeObj.SetProjectName("SSIS");


            upcasting and downcasting:
             //upcasting: creating an instance of child class and storing the address of the same in the variable of type base class, since through that I can access base class members, part of the child class object. It is implicit
            Employee dev = new Developer("sunil", 3, 1000, 2000, 3000, 4000, "CITA");
            //downcasting: explicit
            Developer devOriginal = (Developer)dev;
            //as operator is used to downcast and applicable for reference type only
            Developer devOriginalAgain = dev as Developer;


            //int x = 0;
            //short y = (short)x;
 */