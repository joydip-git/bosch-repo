1. Commands
5. Template
6. Styles
	- property setter
	- event setter
	- trigger

MVVM
Prism

Style:
	Setters
		Setter
	Events
		
	Triggers
		Trigger
	
	Resources
	BasedOn
	TargetType

class Control
{
	public static DependencyProperty FontSizeProperty;	
	public double FontSize
	{
		set{SetValue(FontSizeProperty,value);}
	}
}

class Button:Control
{
}

Trigger: you can automate simple style changes which might require lots of code-behind code to  achieve
	Trigger
	MultiTrigger
	DataTrigger
	MultiDataTrigger
	EventTrigger

Control:
	Logical Tree: 
	Visual Tree: expanded version of Logical Tree, breaks down each and every element to its smaller pieces

	<Button>
		
	</Button>

	Button->ButtonChrome->ContentPresenter->TextBlock->string

	<ControlTemplate>
		<ButtonChrome>
			<ContentPresenter ...>
				<TextBlcok
			</ContentPresenter>
		</ButtonChrome>
		<ControlTemplate.Triggers>
			<Trigger Property="UIElement.ISfocused">
				<Setter Property="BC.RenderDefaulted"
		</ControlTemplate.Triggers>
	<ControlTemplate>


VT -- ControlTemplate -- LT

control fails validation
	Validation.HasError => True
	ValidationError (ErrorContent) object created
	and is added in the control's 
	Validation.Errors collection
	Validation.ErrorTemplate=<pre-defined template>

<TextBlock ToolTip="{Binding Source={}, Path=(Validation.Errors[0]).ErrorContent}">Error</TextBlock>

<AdornedElementPlaceHolder x:Name="placeholder"/>

DataBinding
	ElementName	
	relative source
	source => any obejct

Commands:

UI: design
	

common place: presentation logic

Business Logic
Data access logic

ICommand, RoutedCommand

Commands: represents any application task, keep strack of whether it can be executed
Command Bindings: Links a command to the related application logic for a particular control/area of UI
Command Sources: what triggered the command
Command Targets: is nothing but the element on which the commmand is being performed


Application=>New, Open, SaveAs
Navigation=>BrowseForward
Editing=>MoveToLineEnd, SelectToLineEnd
Component=>
Media=>Play, Pause, etc....


Prism.Core
Prism.Unity
Prism.Wpf

Prism.DryIoc

Shell
	Regions
		Components


Views => MainWindow.xaml
ViewModels => MainWindowViewModel.cs
	


